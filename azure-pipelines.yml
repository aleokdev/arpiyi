# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: $(Date:yyyyMMdd)$(Rev:.r)

trigger:
- master

jobs:
  - job: Ubuntu_Build
    displayName: Ubuntu Build
    condition: succeeded()

    pool:
      vmImage: ubuntu-latest

    variables:
      testRunTitle: '$(build.sourceBranchName)-linux'
      testRunPlatform: linux

    steps:
    - checkout: self
      submodules: true
      displayName: 'Init submodules'

    - script: sudo apt-get update && sudo apt-get -yq install libgtk-3-dev liblua5.3-dev
      displayName: 'Install GTK+3 dev library'

    - script: sudo ln /usr/lib/x86_64-linux-gnu/liblua5.3-c++.so.0 /usr/lib/lua
      displayName: 'Create lua shortcut'

    - task: CMake@1
      displayName: 'Create CMake cache'
      inputs:
        cmakeArgs: '.. -DCMAKE_CXX_COMPILER=clang++-9'

    - task: CMake@1
      displayName: 'Build arpiyi-editor'
      inputs:
        cmakeArgs: '--build . --target arpiyi-editor -- -j 2 VERBOSE=1'

    - task: CMake@1
      displayName: 'Build arpiyi-player'
      inputs:
        cmakeArgs: '--build . --target arpiyi-player -- -j 2'

  - job: Windows_Build
    displayName: Windows Build
    condition: succeeded()

    pool:
      vmImage: windows-latest

    variables:
      testRunTitle: '$(build.sourceBranchName)-windows'
      testRunPlatform: windows

    steps:
    - checkout: self
      submodules: true
      displayName: 'Init submodules'

    - task: CMake@1
      displayName: 'Create CMake cache'
      inputs:
        cmakeArgs: '.. -DCMAKE_CXX_COMPILER=clang++-9'

    - task: CMake@1
      displayName: 'Build arpiyi-editor'
      inputs:
        cmakeArgs: '--build . --target arpiyi-editor'

    - task: CMake@1
      displayName: 'Build arpiyi-player'
      inputs:
        cmakeArgs: '--build . --target arpiyi-player'